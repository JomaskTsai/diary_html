diff --git a/CPU/ARM_A9/startup_arm.s b/CPU/ARM_A9/startup_arm.s
index 1063f06..b2678ed 100755
--- a/CPU/ARM_A9/startup_arm.s
+++ b/CPU/ARM_A9/startup_arm.s
@@ -198,7 +198,12 @@ reset:
 	mov	r0, #0
 #	mcr	p15, 0, r0, c7, c7, 0	/* flush v3/v4 cache */
 	mcr	p15, 0, r0, c8, c7, 0	/* flush v4 TLB */
-
+#ifdef CONFIG_F2_FPGA	
+	mcr	p15, 0, r0, c7, c5, 0   /* invalidate icache */
+	mcr	p15, 0, r0, c7, c5, 6   /* invalidate BP array */
+	mcr	p15, 0, r0, c7, c10, 4  /* DSB */
+	mcr	p15, 0, r0, c7, c5, 4   /* ISB */
+#endif
 	/*
 	 * Enable MMU stuff and caches @ARM B3-23
 	 */
@@ -224,8 +229,12 @@ reset:
 #ifdef CONFIG_L8028_LITE
         mov     r0, #0x40000000		@ modify for L8028 LITE DDR remap fail
 #else
+#ifdef CONFIG_F2_FPGA
+	ldr	r0, =_start
+#else
 	mov     r0, #0
 #endif
+#endif
         mcr     p15, 0, r0, c12, c0, 0  @Set VBAR
 
 
@@ -233,24 +242,25 @@ reset:
 	bl	cpu_init_crit
 #endif
 
-#relocate:				/* relocate U-Boot to RAM	    */
-#	adr	r0, _start		/* r0 <- current position of code   */
-#	ldr	r1, _TEXT_BASE		/* test if we run from flash or RAM */
-#	cmp     r0, r1                  /* don't reloc during debug         */
-#	beq     stack_setup
-#
-#	ldr	r2, _armboot_start
-#	ldr	r3, _bss_start
-#	sub	r2, r3, r2		/* r2 <- size of armboot            */
-#	add	r2, r0, r2		/* r2 <- source end address         */
-#
-#copy_loop:
-#	ldmia	r0!, {r3-r10}		/* copy from source address [r0]    */
-#	stmia	r1!, {r3-r10}		/* copy to   target address [r1]    */
-#	cmp	r0, r2			/* until source end addreee [r2]    */
-#	ble	copy_loop
-#
-#	/* Set up the stack						    */
+#ifdef CONFIG_F2_FPGA
+relocate:				/* relocate U-Boot to RAM	    */
+	adr	r0, _start		/* r0 <- current position of code   */
+	ldr	r1, _TEXT_BASE		/* test if we run from flash or RAM */
+	cmp     r0, r1                  /* don't reloc during debug         */
+	beq     stack_setup
+
+	ldr	r2, _armboot_start
+	ldr	r3, _bss_start
+	sub	r2, r3, r2		/* r2 <- size of armboot            */
+	add	r2, r0, r2		/* r2 <- source end address         */
+
+copy_loop:
+	ldmia	r0!, {r3-r10}		/* copy from source address [r0]    */
+	stmia	r1!, {r3-r10}		/* copy to   target address [r1]    */
+	cmp	r0, r2			/* until source end addreee [r2]    */
+	ble	copy_loop
+#endif
+	/* Set up the stack						    */
 stack_setup:
 #if 0
 	ldr	r0, _TEXT_BASE		/* upper 128 KiB: relocated uboot   */
@@ -263,7 +273,6 @@ stack_setup:
 #endif
 	ldr	sp, STACK_START
 
-/* both _bss_start and _bss_end must be 4 bytes alignment, or the code will enter infinite loop */
 #ifndef CONFIG_ROM
 clear_bss:
 	ldr	r0, _bss_start		/* find start of bss segment        */
